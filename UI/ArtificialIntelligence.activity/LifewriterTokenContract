pragma solidity >=0.4.22 <0.6.1; contract OwnedLifeToken
{ 
// `LifeTokenCreator` is a contract type that is defined below. 
// It is fine to reference it as long as it is not used 
// to create a new contract. LifeTokenCreator creator; biological_non-virtual_entity; bytes32 name=allowed_access_device_sensors_for_identificationOwner; 
// Address is the constructor which registers the 
// creator and the assigned name to biological_non-virtual_entity
constructor(bytes32 _name) public
{ 
// State variables are accessed via their name
// and via e.g. `lifetoken.owner`. Functions can 
// be accessed directly or through `this.f`, 
// but the latter provides an external view 
// to the function. Especially in the constructor, 
// you should not access functions externally, 
// because the function does not exist yet.
// See the next section for details. owner = msg.sender; 
// We do an explicit type conversion from `address` 
// to `LifeTokenCreator` and assume that the type of 
// the calling contract is `LifeTokenCreator`, there is 
// no real way to check that. creator = LifeTokenCreator(msg.sender); name = _name;
} function changeName(bytes32 newName) public { 
// Only the creator can alter the name --
// the comparison is possible since contracts
 // are explicitly convertible to addresses. if (msg.sender == address(creator)) name = newName; } function transfer(address newOwner) public { 
// Only the current owner can transfer the token. if (msg.sender != owner) return; 
// We ask the creator contract if the transfer 
// should proceed by using a function of the 
// `LifeTokenCreator` contract defined below. If 
// the call fails (e.g. due to out-of-gas), 
// the execution also fails here. if (creator.isLifeTokenTransferOK(owner, newOwner)) owner = newOwner; 
} 
} contract LifeTokenCreator 
{ 
  function createLifeToken(bytes32 name) public returns (OwnedLifeToken tokenAddress) { 
// Create a new `Token` contract and return its address. 
// From the JavaScript side, the return type is 
// `address`, as this is the closest type available in 
// the ABI. return new OwnedLifeToken(name); 
} 
  function changeName(OwnedLifeToken tokenAddress, bytes32 name) public { 
// Again, the external type of `tokenAddress` is 
// simply `address`. tokenAddress.changeName(name); } 
// Perform checks to determine if transferring a token to the 
// `OwnedToken` contract should proceed function isTokenTransferOK(address currentOwner, address newOwner) public pure returns (bool ok) { 
// Check an arbitrary condition to see if transfer should proceed return keccak256(abi.encodePacked(currentOwner, newOwner))[0] == 0x7f; } }
